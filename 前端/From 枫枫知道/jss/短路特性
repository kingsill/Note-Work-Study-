### 短路特性（Short-Circuit Evaluation）

短路特性是逻辑运算符（如 `&&` 和 `||`）在评估表达式时的一种优化机制。当结果可以提前确定时，它会停止进一步的运算。

---

#### **`||` 运算符（逻辑或）**
- **规则**: 从左到右依次评估表达式，返回第一个 **"真值"**（truthy）的表达式值。如果所有表达式均为 **"假值"**（falsy），返回最后一个表达式的值。
- **短路现象**: 如果找到一个 **"真值"**，后续的表达式就不会再被评估。

**例子：**
```javascript
console.log(0 || false || "hello" || 42);
// 输出: "hello"
// 短路位置: "hello" 是第一个 truthy 值，后面的 42 不会被评估。

console.log(null || undefined || 0 || NaN);
// 输出: NaN
// 所有值都是 falsy，因此返回最后一个表达式 NaN。
```

**常见用途**: 设置默认值。
```javascript
let value = userInput || "default value";
// 如果 userInput 是 falsy（如 null 或 undefined），value 会被设置为 "default value"。
```

---

#### **`&&` 运算符（逻辑与）**
- **规则**: 从左到右依次评估表达式，返回第一个 **"假值"**（falsy）的表达式值。如果所有表达式均为 **"真值"**（truthy），返回最后一个表达式的值。
- **短路现象**: 如果找到一个 **"假值"**，后续的表达式就不会再被评估。

**例子：**
```javascript
console.log(1 && "hello" && true && 42);
// 输出: 42
// 短路位置: 所有值都是 truthy，因此返回最后一个表达式。

console.log(1 && 0 && "hello" && 42);
// 输出: 0
// 短路位置: 0 是第一个 falsy 值，后面的 "hello" 和 42 不会被评估。
```

**常见用途**: 条件判断链。
```javascript
let user = { name: "Alice", settings: { theme: "dark" } };
console.log(user && user.settings && user.settings.theme);
// 输出: "dark"
// 短路避免了对未定义对象属性的访问，避免报错。
```

---

### 短路特性的核心点
1. **`||` 找第一个 truthy，短路在 truthy 处。**
2. **`&&` 找第一个 falsy，短路在 falsy 处。**
3. 如果没有触发短路，`||` 返回最后一个 falsy，`&&` 返回最后一个 truthy。

---

### 注意事项
1. **短路会跳过副作用代码**:
   ```javascript
   function logMessage() {
       console.log("This message is logged");
   }
   false && logMessage(); // 不会调用 logMessage，因为短路了。
   true || logMessage();  // 同样不会调用 logMessage，因为短路了。
   ```

2. **非布尔值参与逻辑运算时，返回的是原始值**：
   - `||` 和 `&&` 返回的不是布尔值，而是表达式的具体值。

---

### 总结
短路特性可以优化代码执行，避免不必要的运算，同时在 JavaScript 中常用于默认值设置、条件判断链等场景。掌握这一特性可以写出更简洁高效的代码。