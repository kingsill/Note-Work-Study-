# OOP

封装、继承、多态

# 初识对象

- **类(Class):** 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例

- **方法：**类中定义的函数。

- **类变量：**类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。
- **数据成员：**类变量或者实例变量用于处理类及其实例对象的相关的数据。

- **继承：**即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟"是一个（is-a）"关系（例图，Dog是一个Animal）。
- **实例化：**创建一个类的实例，类的具体对象。
- **对象：**通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。



# 类定义

```python
class ClassName:
    <statement-1>
    .
    .
    .
    <statement-N>
```

init方法没有定义的变量需要提前进行定义

# 类对象

类对象支持两种操作：属性引用和实例化。

```python
#!/usr/bin/python3
 
class MyClass:
    """一个简单的类实例"""
    i = 12345
    def f(self):
        return 'hello world'
 
# 实例化类
x = MyClass()
 
# 访问类的属性和方法
print("MyClass 类的属性 i 为：", x.i)
print("MyClass 类的方法 f 输出为：", x.f())
```

类有一个名为 __init__() 的特殊方法（**构造方法**），该方法在类实例化时会自动调用

当然， __init__() 方法可以有参数，参数通过 __init__() 传递到类的实例化操作上。例如:

```python
#!/usr/bin/python3
 
class Complex:
    def __init__(self, realpart, imagpart):
        self.r = realpart
        self.i = imagpart
x = Complex(3.0, -4.5)
print(x.r, x.i)   # 输出结果：3.0 -4.5
```

## self 代表类的实例，而非类

类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的**第一个参数名称**, 按照惯例它的名称是 self。self 不是 python 关键字，我们把他换成 runoob 也是可以正常执行的:

```python
class Test:
    def prt(self):
        print(self)
        print(self.__class__)
 
t = Test()
t.prt()
----
<__main__.Test instance at 0x100771878>
__main__.Test

```

# 类的属性与方法

在类的内部，使用 **def** 关键字来定义一个方法，与一般函数定义不同，类方法必须包含参数 self, 且为第一个参数，self 代表的是类的实例。

```python
#!/usr/bin/python3
 
#类定义
class people:
    #定义基本属性
    name = ''
    age = 0
    #定义私有属性,私有属性在类外部无法直接进行访问
    __weight = 0
    #定义构造方法
    def __init__(self,n,a,w):
        self.name = n
        self.age = a
        self.__weight = w
    def speak(self):
        print("%s 说: 我 %d 岁。" %(self.name,self.age))
 
# 实例化类
p = people('runoob',10,30)
p.speak()
```



##  类的私有属性

```python
#!/usr/bin/python3
 
class JustCounter:
    __secretCount = 0  # 私有变量
    publicCount = 0    # 公开变量
 
    def count(self):
        self.__secretCount += 1
        self.publicCount += 1
        print (self.__secretCount)
 
counter = JustCounter()
counter.count()
counter.count()
print (counter.publicCount)
print (counter.__secretCount)  # 报错，实例不能访问私有变量
```



两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问

## 类的私有方法

**__private_method**：两个下划线开头，声明该方法为私有方法，只能在类的内部调用 ，不能在类的外部调用。**self.__private_methods**。



# 魔术方法

## –str– 字符串方法

如果使用–str–方法，在其实例进行str方法时会自动调用

## –lt– 比较大小

实际定义的是小于的逻辑，注意

定义后，实例可以进行大小比较

> le小于等于

> eq 等于 



# 继承

在class是加入父名即可，多个继承用'，'分割开即可



```python
#!/usr/bin/python3
 
class Parent:        # 定义父类
   def myMethod(self):
      print ('调用父类方法')
 
class Child(Parent): # 定义子类
   def myMethod(self):
      print ('调用子类方法')
 
c = Child()          # 子类实例
c.myMethod()         # 子类调用重写方法
super(Child,c).myMethod() #用子类对象调用父类已被覆盖的方法
```



# 类型注解

注明传入参数的类型

帮助代码提示

## 变量的类型注解

- 基础语法：`变量：类型`

> var_1:int=10

![image-20241107153345757](OOP.assets/image-20241107153345757.png)

- 在注释中进行注解

```python
var_1=random.randint(1,10) #type=int

```

## 函数的类型注解

```python
def input_int(number:int,sentence:str)->int:
    return number*2
```

![image-20241107170439569](OOP.assets/image-20241107170439569.png)

## union 注解

联合的类型注解

```python
from typing import Union #需要导包
my_list:list[Union[str,int]]=[1,2,"wang"]
```

union指里面的类型可能是str或int，不知名具体类型



# 多态
多态性（polymorphisn）是允许你将父对象设置成为和一个或更多的他的子对象相等的技术，赋值之后，父对象就可以根据当前赋值给它的子对象的特性以不同的方式运作。简单的说，就是一句话：允许将子类类型的指针赋值给父类类型的指针。



# 抽象类 接口

让父类用来确定有哪些方法

具体的方法实现，由子类自行决定



```python
class Animal:
    def spealk(self):
        pass

class Dog(animal:Animal):
    def speak(self):
        print("wolfwolf")
        
class Cat(animal:Animal):
    def speak(self):
        print("miao")
 
```

继承后，子类实现父类的方法，成为接口



用于顶层设计，设计标准，便于子类做具体实现，对子类的软性约束

配合多态使用



